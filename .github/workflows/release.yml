name: Release
on:
  push:
    tags:
      - "202*" # any tag. GH releases (containing binaries for download) require tags

env:
    GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:

  prepare:
    runs-on: [ self-hosted, Linux ]
    if: ${{ github.repository_owner == 'rpardini' }}
    outputs:
      tagName: ${{ steps.tagName.outputs.tag }}
    steps:
      - uses: olegtarasov/get-tag@v2.1 # get the tag name from the ref.
        id: tagName
      # This creates an empty release on the tag with just the header.
      - name: Release ${{ matrix.board }}
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/') # only for tags. GitHub requires tags for releases.
        with:
          body: |
            ### Release ${{ steps.tagName.outputs.tag }}

  "A": # short name because GH will expand with the matrix values
    needs: [ prepare ]
    runs-on: [ self-hosted, Linux, 'can-build-target-impish', '${{ matrix.runnerLabel }}', '${{ matrix.runnerLabelKernel }}' ]
    timeout-minutes: 480 # First builds on new machines can take extremely long until caches are primed
    if: ${{ github.repository_owner == 'rpardini' }}
    strategy:
      fail-fast: false # let other jobs try to complete if one fails
      matrix:
        # include syntax allows sparse matrices
        # see # https://docs.github.com/en/actions/reference/workflow-syntax-for-github-actions#example-including-new-combinations

        # board: will build rpardini-<board>.conf in userpatches.
        # desc: markdown for description in release notes
        # runnerLabel: goes into runs-on to select preferred builder via label
        # vars: env vars to pass both to scripts and ./compile.sh
        # aa: GH Actions orders the jobs by the first key value. 'aa' should be first. it never is. it is actually quite pointless trying. it's effectively random.

        include:
          ## desktop cinammon for uefi-arm64
          #- aa: 0001
          #  board: uefi-arm64
          #  desc: UEFI Generic arm64, with -generic Ubuntu kernel (ddk), desktop cinnamon
          #  runnerLabel: can-build-arm64
          #  runnerLabelKernel: can-build-rootfs-only
          #  vars: "CLOUD_IMAGE=no BRANCH=ddk BUILD_DESKTOP=yes DESKTOP_APPGROUPS_SELECTED=\"\" DESKTOP_ENVIRONMENT=cinnamon DESKTOP_ENVIRONMENT_CONFIG_NAME=config_base"

          #- aa: 0002
          #  board: uefi-arm64
          #  desc: UEFI Generic arm64, with Armbian mainline kernel (current), desktop cinnamon
          #  runnerLabel: can-build-arm64
          #  runnerLabelKernel: can-build-kernels
          #  vars: "CLOUD_IMAGE=no BRANCH=current BUILD_DESKTOP=yes DESKTOP_APPGROUPS_SELECTED=\"\" DESKTOP_ENVIRONMENT=cinnamon DESKTOP_ENVIRONMENT_CONFIG_NAME=config_base"

          #- aa: 0003
          #  board: uefi-arm64
          #  desc: UEFI Generic arm64, with Armbian mainline kernel (edge), desktop cinnamon
          #  runnerLabel: can-build-arm64
          #  runnerLabelKernel: can-build-kernels
          #  vars: "CLOUD_IMAGE=no BRANCH=edge BUILD_DESKTOP=yes DESKTOP_APPGROUPS_SELECTED=\"\" DESKTOP_ENVIRONMENT=cinnamon DESKTOP_ENVIRONMENT_CONFIG_NAME=config_base"

          # 0000 = stuff I need first for emergency reasons, avoid.
          # 0100 = meson64 stuff (fixed version), boards I own first, then others
          # 0200 = uefi stuff (fixed version)
          # 0500+ other stuff

          - aa: 0710
            board: odroidm1
            desc: odroidm1, edge, regular CLI #, built on x86
            runnerLabel: can-build-x86-huge
            runnerLabelKernel: can-build-kernels
            vars: "CLOUD_IMAGE=no BRANCH=edge CLOUD_IMAGE=no EXTRAWIFI=no BUILD_KSRC=yes INSTALL_KSRC=yes BUILD_MINIMAL=no BUILD_DESKTOP=no INSTALL_HEADERS=yes "





          #          - aa: 0205
          #            board: rpi4b
          #            desc: Raspberry Pi 4B, ddk, desktop cinnamon
          #            runnerLabel: can-build-arm64
          #            runnerLabelKernel: can-build-rootfs-only
          #            vars: "CLOUD_IMAGE=no BRANCH=ddk BUILD_DESKTOP=yes DESKTOP_APPGROUPS_SELECTED=\"\" DESKTOP_ENVIRONMENT=cinnamon DESKTOP_ENVIRONMENT_CONFIG_NAME=config_base"

          #- aa: 0206
          #  board: rpi4b
          #  desc: Raspberry Pi 4B, edge, desktop cinnamon
          #  runnerLabel: can-build-arm64
          #  runnerLabelKernel: can-build-kernels
          #  vars: "CLOUD_IMAGE=no BRANCH=edge BUILD_DESKTOP=yes DESKTOP_APPGROUPS_SELECTED=\"\" DESKTOP_ENVIRONMENT=cinnamon DESKTOP_ENVIRONMENT_CONFIG_NAME=config_base"

          #          - aa: 0210
          #            board: rpi4b
          #            desc: Raspberry Pi 4B, using Ubuntu's raspi kernel (ddk), cloud image, user-data at /boot/firmware (FAT)
          #            runnerLabel: can-build-arm64
          #            runnerLabelKernel: can-build-rootfs-only
          #            vars: "CLOUD_IMAGE=yes BRANCH=ddk"

          # cloud images for meson 64 -- what branch is this? possibly duplicate?
          # - aa: 0500
          #   board: odroidhc4
          #   desc: ODROID HC4, cloud image, user-data at /boot (ext4)
          #   runnerLabel: can-build-arm64
          #   runnerLabelKernel: can-build-kernels
          #   vars: "CLOUD_IMAGE=yes"

          #- aa: 0550
          #  board: odroidn2
          #  desc: ODROID N2+, cloud image, user-data at /boot (ext4)
          #  runnerLabel: can-build-arm64
          #  runnerLabelKernel: can-build-kernels
          #  vars: "CLOUD_IMAGE=yes"

    steps:

      - name: Checkout this (release) repo into release dir
        uses: actions/checkout@v2
        with:
          path: release

      - name: Preserve previous run caches and cleanup
        run: |
          sudo --preserve-env \
            REGULAR_USER="$(whoami)" \
            RELEASE_OWNER="${{ github.repository_owner }}" \
            RELEASE_OWNER_AND_REPO="${{ github.repository }}" \
            RELEASE_TAG="${{needs.prepare.outputs.tagName}}" \
            GH_FULL_RUN_ID="${{ github.run_id }}_${{github.run_number}}_${{github.run_attempt}}" \
            bash --noprofile --norc -e release/cleanup.sh

      - name: Checkout build repo
        uses: actions/checkout@v2
        with:
          repository: ${{ github.repository_owner }}/armbian-build
          ref: extensions # branch to build from.
          clean: true # true is default. it *will* delete the hosts /dev if mounted inside.
          path: build

      - name: Restore caches
        run: |
          sudo --preserve-env \
            REGULAR_USER="$(whoami)" \
            RELEASE_OWNER="${{ github.repository_owner }}" \
            RELEASE_OWNER_AND_REPO="${{ github.repository }}" \
            RELEASE_TAG="${{needs.prepare.outputs.tagName}}" \
            GH_FULL_RUN_ID="${{ github.run_id }}_${{github.run_number}}_${{github.run_attempt}}" \
            bash --noprofile --norc -e release/restore_cache.sh

      - name: Build board ${{ matrix.board }}
        id: buildBoard
        working-directory: build
        continue-on-error: false # No, break as soon as possible. Logs will be inline.
        run: |
          sudo --preserve-env ${{ matrix.vars }} \
            REGULAR_USER="$(whoami)" \
            RELEASE_OWNER="${{ github.repository_owner }}" \
            RELEASE_OWNER_AND_REPO="${{ github.repository }}" \
            RELEASE_TAG="${{needs.prepare.outputs.tagName}}" \
            bash --noprofile --norc -e ../release/build.sh \
            "${{ matrix.board }}" "${{ matrix.vars }}"

      - name: Compress/Prepare release ${{ matrix.board }}
        id: compress
        working-directory: build/output
        continue-on-error: false  # No, break as soon as possible. Logs will be inline.
        run: |
          sudo --preserve-env ${{ matrix.vars }} \
            MATRIX_DESC="${{ matrix.desc }}" \
            REGULAR_USER="$(whoami)" \
            RELEASE_OWNER="${{ github.repository_owner }}" \
            RELEASE_OWNER_AND_REPO="${{ github.repository }}" \
            RELEASE_TAG="${{needs.prepare.outputs.tagName}}" \
            bash --noprofile --norc -e ../../release/prepare_release.sh \
            "${{ matrix.board }}" "${{ matrix.vars }}"

      - name: Release ${{ matrix.board }}
        id: release
        uses: softprops/action-gh-release@2d72d869af3bf23602f9593a1e3fd739b80ac1eb # which is v0.1.12, concat release bodies. # @v1 is a moving target
        if: startsWith(github.ref, 'refs/tags/') # only for tags. GitHub requires tags for releases.
        with:
          body_path: build/output/release.md # created by prepare_release.sh
          files: |
            build/output/images/*.xz

      - name: Upload logs as artifact ${{ matrix.board }}
        uses: actions/upload-artifact@v2
        with:
          name: build-logs
          path: build/output/images/build.logs.*.xz

      - name: Finish build with status
        run: |
          if [[ "${{ steps.buildBoard.outcome }}" == "failure" ]]; then
            echo "buildBoard failed"
            exit 2
          fi
